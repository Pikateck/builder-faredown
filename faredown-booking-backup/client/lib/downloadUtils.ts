// Download utilities for handling file downloads and ZIP creation

export interface DownloadFile {
  name: string;
  content: string;
  type?: string;
}

export const downloadTextFile = (content: string, filename: string): void => {
  try {
    const blob = new Blob([content], { type: "text/plain" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Download failed:", error);
    throw new Error("Failed to download file");
  }
};

export const downloadJSON = (data: any, filename: string): void => {
  try {
    const content = JSON.stringify(data, null, 2);
    const blob = new Blob([content], { type: "application/json" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.error("JSON download failed:", error);
    throw new Error("Failed to download JSON file");
  }
};

// Simple ZIP functionality using client-side compression
export const createAndDownloadZip = (
  files: DownloadFile[],
  zipName: string,
): void => {
  try {
    // For a simple implementation, we'll create a text file with all contents
    // In production, you'd use a library like JSZip
    let zipContent = `# ${zipName}\n\nThis archive contains the following files:\n\n`;

    files.forEach((file, index) => {
      zipContent += `=== ${file.name} ===\n`;
      zipContent += file.content;
      zipContent += "\n\n";
      if (index < files.length - 1) {
        zipContent += "---\n\n";
      }
    });

    zipContent += `\n\nGenerated by faredown.com on ${new Date().toLocaleString()}`;

    const blob = new Blob([zipContent], { type: "text/plain" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = zipName.endsWith(".txt") ? zipName : `${zipName}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.error("ZIP creation failed:", error);
    throw new Error("Failed to create ZIP file");
  }
};

export const generateBookingPackage = (bookingData: any): void => {
  try {
    const voucher = `
HOTEL BOOKING VOUCHER
faredown.com

Booking ID: ${bookingData.id || "N/A"}
Date: ${new Date().toLocaleDateString()}

Hotel: ${bookingData.hotel?.name || "Hotel Name"}
Location: ${bookingData.hotel?.location || "Location"}
Check-in: ${bookingData.checkIn || "N/A"}
Check-out: ${bookingData.checkOut || "N/A"}
Guests: ${bookingData.guests || "N/A"}
Rooms: ${bookingData.rooms || "N/A"}

Total: ₹${(bookingData.total || 0).toLocaleString()}
Payment Status: ${bookingData.paymentStatus || "Confirmed"}

Please present this at the hotel during check-in.
    `;

    const invoice = `
HOTEL BOOKING INVOICE
faredown.com

Invoice #: INV-${bookingData.id || Date.now()}
Date: ${new Date().toLocaleDateString()}

Guest Information:
Name: ${bookingData.guest?.firstName || "Guest"} ${bookingData.guest?.lastName || "Name"}
Email: ${bookingData.guest?.email || "email@example.com"}
Phone: ${bookingData.guest?.phone || "Phone Number"}

Service Details:
Hotel: ${bookingData.hotel?.name || "Hotel Name"}
Room: ${bookingData.room?.name || "Room Type"}
Check-in: ${bookingData.checkIn || "N/A"}
Check-out: ${bookingData.checkOut || "N/A"}
Nights: ${bookingData.nights || "N/A"}

Amount: ₹${(bookingData.total || 0).toLocaleString()}
Payment Method: ${bookingData.paymentMethod || "Credit Card"}
Status: ${bookingData.paymentStatus || "Paid"}

Thank you for choosing faredown.com!
    `;

    const files: DownloadFile[] = [
      { name: "voucher.txt", content: voucher },
      { name: "invoice.txt", content: invoice },
      {
        name: "booking-details.json",
        content: JSON.stringify(bookingData, null, 2),
      },
    ];

    createAndDownloadZip(
      files,
      `booking-package-${bookingData.id || Date.now()}`,
    );
  } catch (error) {
    console.error("Package generation failed:", error);
    throw new Error("Failed to generate booking package");
  }
};
